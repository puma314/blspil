// import path = require('path');
const instructions = require("../src/instructions");
const Engine = require("../src/engine");
const path = require("path");
const assert = require("chai").assert;

// This is the G1 and G2 generators
const g1 = [
  3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,
  1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569n,
];
const g2 = [
  [
    352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,
    3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n,
  ],
  [
    1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n,
    927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n,
  ],
];

const two_g1 = [
  838589206289216005799424730305866328161735431124665289961769162861615689790485775997575391185127590486775437397838n,
  3450209970729243429733164009999191867485184320918914219895632678707687208996709678363578245114137957452475385814312n,
];

const two_g2 = [
  [
    3419974069068927546093595533691935972093267703063689549934039433172037728172434967174817854768758291501458544631891n,
    1586560233067062236092888871453626466803933380746149805590083683748120990227823365075019078675272292060187343402359n,
  ],
  [
    678774053046495337979740195232911687527971909891867263302465188023833943429943242788645503130663197220262587963545n,
    2374407843478705782611042739236452317510200146460567463070514850492917978226342495167066333366894448569891658583283n,
  ],
];

function assert_g1_equal(result, expected) {
  for (var i = 0; i < 2; i++) {
    assert(result[i] == expected[i]);
  }
}

function assert_g2_equal(result, expected) {
  for (var i = 0; i < 2; i++) {
    for (var j = 0; j < 2; j++) {
      assert(result[i][j] == expected[i][j]);
    }
  }
}

describe("curve", function () {
  it("double g1", async function () {
    const engine = new Engine(instructions);
    const result = engine.G1.double(g1);
    const expected = [
      838589206289216005799424730305866328161735431124665289961769162861615689790485775997575391185127590486775437397838n,
      3450209970729243429733164009999191867485184320918914219895632678707687208996709678363578245114137957452475385814312n,
    ];
    assert_g1_equal(result, expected);
  });

  it("double g2", async function () {
    const engine = new Engine(instructions);
    const result = engine.G2.double(g2);

    const expected = [
      [
        3419974069068927546093595533691935972093267703063689549934039433172037728172434967174817854768758291501458544631891n,
        1586560233067062236092888871453626466803933380746149805590083683748120990227823365075019078675272292060187343402359n,
      ],
      [
        678774053046495337979740195232911687527971909891867263302465188023833943429943242788645503130663197220262587963545n,
        2374407843478705782611042739236452317510200146460567463070514850492917978226342495167066333366894448569891658583283n,
      ],
    ];
    assert_g2_equal(result, expected);
  });

  it("add g1", async function () {
    const engine = new Engine(instructions);
    const result = engine.G1.add(g1, two_g1);
    const expected = [
      1527649530533633684281386512094328299672026648504329745640827351945739272160755686119065091946435084697047221031460n,
      487897572011753812113448064805964756454529228648704488481988876974355015977479905373670519228592356747638779818193n,
    ];
    assert_g1_equal(result, expected);
  });
  it("add g2", async function () {
    const engine = new Engine(instructions);
    const result = engine.G2.add(g2, two_g2);
    const expected = [
      [
        2795155019138475430256695697248607867022196082692926850257941893956680503583886174445899854256891620515274933186478n,
        1418901263980595683832511076652430035654903023556505873032297534993731256453342997202098832403658787934376638965468n,
      ],
      [
        1713408536894110516522969272885192173669900392782465197506312048399987681703463801235485042423756235640603447122066n,
        1376945178829045108008380835987620979304438294788415956605678509674588356753313865659068546846109894276784773457993n,
      ],
    ];
    assert_g2_equal(result, expected);
  });
  it("neg g1", async function () {
    const engine = new Engine(instructions);
    const result = engine.G1.neg(g1);
    const expected = [
      3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,
      2662903010277190920397318445793982934971948944000658264905514399707520226534504357969962973775649129045502516118218n,
    ];
    assert_g1_equal(result, expected);
  });
  it("neg g2", async function () {
    const engine = new Engine(instructions);
    const result = engine.G2.neg(g2);
    const expected = [
      [
        352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,
        3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n,
      ],
      [
        2017258952934375457849735304558732518256013841723352154472679471057686924117014146018818524865681679396399932211882n,
        3074855889729334937670587859959866275799142626485414915307030157330054773488162299461738339401058098462460928340205n,
      ],
    ];
    assert_g2_equal(result, expected);
  });
  it("twist", async function () {
    const engine = new Engine(instructions);
    const result = engine.G2.twist(g2);
    const expected = [
      [
        [
          [0n, 0n],
          [0n, 0n],
          [
            352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,
            0n,
          ],
        ],
        [
          [0n, 0n],
          [0n, 0n],
          [
            1353221637328373545892060349371360746048220186341936159219732281025920769516621702780080981380240920942561918531299n,
            0n,
          ],
        ],
      ],
      [
        [
          [0n, 0n],
          [
            0n,
            1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n,
          ],
          [0n, 0n],
        ],
        [
          [0n, 0n],
          [
            0n,
            1472406309213353956798468635167385199506877017588472562248853724925831900559844855499883907296819622485916638215732n,
          ],
          [0n, 0n],
        ],
      ],
    ];
    for (var x_or_y = 0; x_or_y < 1; i++) {
      for (var i = 0; i < 2; i++) {
        for (var j = 0; j < 3; j++) {
          for (var k = 0; k < 2; k++) {
            assert(result[x_or_y][i][j][k] == expected[x_or_y][i][j][k]);
          }
        }
      }
    }
  });
  it("cast_point_to_fq12", async function () {
    const engine = new Engine(instructions);
    const result = engine.G1.cast_point_to_fq12(g1);
    const expected = [
      [
        [
          [
            3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,
            0n,
          ],
          [0n, 0n],
          [0n, 0n],
        ],
        [
          [0n, 0n],
          [0n, 0n],
          [0n, 0n],
        ],
      ],
      [
        [
          [
            1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569n,
            0n,
          ],
          [0n, 0n],
          [0n, 0n],
        ],
        [
          [0n, 0n],
          [0n, 0n],
          [0n, 0n],
        ],
      ],
    ];
    for (var x_or_y = 0; x_or_y < 1; i++) {
      for (var i = 0; i < 2; i++) {
        for (var j = 0; j < 3; j++) {
          for (var k = 0; k < 2; k++) {
            assert(result[x_or_y][i][j][k] == expected[x_or_y][i][j][k]);
          }
        }
      }
    }
  });
});
