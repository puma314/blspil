constant %N = 2**16;

include "arith384.pil";
include "global.pil";

namespace main(%N);

    pol constant L[12];
    pol constant RamAddr;
    pol constant pA, pB, pC, pE;    // For each latch in the arithmetic, this is the pointer to the ram.
    pol constant isConstant;        // 1 when the valu in the ram must match the constants
    pol constant ConstVal[8];

    pol commit ramVal[8];
    isConstant * (ConstVal[0] - ramVal[0]) = 0;
    isConstant * (ConstVal[1] - ramVal[1]) = 0;
    isConstant * (ConstVal[2] - ramVal[2]) = 0;
    isConstant * (ConstVal[3] - ramVal[3]) = 0;
    isConstant * (ConstVal[4] - ramVal[4]) = 0;
    isConstant * (ConstVal[5] - ramVal[5]) = 0;
    isConstant * (ConstVal[6] - ramVal[6]) = 0;
    isConstant * (ConstVal[7] - ramVal[7]) = 0;

    // Arith384.a[x] => 16 bits
    // 3 registries => 16 * 3 = 48 bits
    // 8 registries of 3 => 384 bits
    {
        pA, 
        Arith384.a[0] + 2**16* Arith384.a[1] + 2**32 * Arith384.a[2],
        Arith384.a[3] + 2**16* Arith384.a[4] + 2**32 * Arith384.a[5],
        Arith384.a[6] + 2**16* Arith384.a[7] + 2**32 * Arith384.a[8],
        Arith384.a[9] + 2**16* Arith384.a[10] + 2**32 * Arith384.a[11],
        Arith384.a[12] + 2**16* Arith384.a[13] + 2**32 * Arith384.a[14],
        Arith384.a[15] + 2**16* Arith384.a[16] + 2**32 * Arith384.a[17],
        Arith384.a[18] + 2**16* Arith384.a[19] + 2**32 * Arith384.a[20],
        Arith384.a[21] + 2**16* Arith384.a[22] + 2**32 * Arith384.a[23]
    } in {
        RamAddr,
        ramVal[0],
        ramVal[1],
        ramVal[2],
        ramVal[3],
        ramVal[4],
        ramVal[5],
        ramVal[6],
        ramVal[7]
    };

    {
        pB, 
        Arith384.b[0] + 2**16* Arith384.b[1] + 2**32 * Arith384.b[2],
        Arith384.b[3] + 2**16* Arith384.b[4] + 2**32 * Arith384.b[5],
        Arith384.b[6] + 2**16* Arith384.b[7] + 2**32 * Arith384.b[8],
        Arith384.b[9] + 2**16* Arith384.b[10] + 2**32 * Arith384.b[11],
        Arith384.b[12] + 2**16* Arith384.b[13] + 2**32 * Arith384.b[14],
        Arith384.b[15] + 2**16* Arith384.b[16] + 2**32 * Arith384.b[17],
        Arith384.b[18] + 2**16* Arith384.b[19] + 2**32 * Arith384.b[20],
        Arith384.b[21] + 2**16* Arith384.b[22] + 2**32 * Arith384.b[23]
    } in {
        RamAddr,
        ramVal[0],
        ramVal[1],
        ramVal[2],
        ramVal[3],
        ramVal[4],
        ramVal[5],
        ramVal[6],
        ramVal[7]
    };

    {
        pC, 
        Arith384.c[0] + 2**16* Arith384.c[1] + 2**32 * Arith384.c[2],
        Arith384.c[3] + 2**16* Arith384.c[4] + 2**32 * Arith384.c[5],
        Arith384.c[6] + 2**16* Arith384.c[7] + 2**32 * Arith384.c[8],
        Arith384.c[9] + 2**16* Arith384.c[10] + 2**32 * Arith384.c[11],
        Arith384.c[12] + 2**16* Arith384.c[13] + 2**32 * Arith384.c[14],
        Arith384.c[15] + 2**16* Arith384.c[16] + 2**32 * Arith384.c[17],
        Arith384.c[18] + 2**16* Arith384.c[19] + 2**32 * Arith384.c[20],
        Arith384.c[21] + 2**16* Arith384.c[22] + 2**32 * Arith384.c[23]
    } in {
        RamAddr,
        ramVal[0],
        ramVal[1],
        ramVal[2],
        ramVal[3],
        ramVal[4],
        ramVal[5],
        ramVal[6],
        ramVal[7]
    };

    {
        pE, 
        Arith384.e[0] + 2**16* Arith384.e[1] + 2**32 * Arith384.e[2],
        Arith384.e[3] + 2**16* Arith384.e[4] + 2**32 * Arith384.e[5],
        Arith384.e[6] + 2**16* Arith384.e[7] + 2**32 * Arith384.e[8],
        Arith384.e[9] + 2**16* Arith384.e[10] + 2**32 * Arith384.e[11],
        Arith384.e[12] + 2**16* Arith384.e[13] + 2**32 * Arith384.e[14],
        Arith384.e[15] + 2**16* Arith384.e[16] + 2**32 * Arith384.e[17],
        Arith384.e[18] + 2**16* Arith384.e[19] + 2**32 * Arith384.e[20],
        Arith384.e[21] + 2**16* Arith384.e[22] + 2**32 * Arith384.e[23]
    } in {
        RamAddr,
        ramVal[0],
        ramVal[1],
        ramVal[2],
        ramVal[3],
        ramVal[4],
        ramVal[5],
        ramVal[6],
        ramVal[7]
    };

